
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #!/usr/bin/env Rscript
> 
> #################################### GaussClust.R ########################################
> 
> ############ CONDUCT SETUP, READ IN AND PLOT THE DATA
> setwd('/Users/justinbagley/Documents/GaussClust/Ex2_bgmmSensTest/run5_0.95')
> # 
> ##--Load needed library, R code, or package stuff. Install packages if not present.
> packages <- c('bgmm', 'Rmixmod', 'StatMatch', 'MASS', 'ggfortify', 'vegan')
> if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
+     install.packages(setdiff(packages, rownames(installed.packages())))
+ }
> 
> library(bgmm)
Loading required package: mvtnorm
Loading required package: car
Loading required package: lattice
Loading required package: combinat

Attaching package: ‘combinat’

The following object is masked from ‘package:utils’:

    combn

> library(Rmixmod)
Loading required package: Rcpp
Rmixmod version 2.1.1 loaded
R package of mixmodLib version 3.2.2

Condition of use
----------------
Copyright (C)  MIXMOD Team - 2001-2013

MIXMOD is publicly available under the GPL license (see www.gnu.org/copyleft/gpl.html)
You can redistribute it and/or modify it under the terms of the GPL-3 license.
Please understand that there may still be bugs and errors. Use it at your own risk.
We take no responsibility for any errors or omissions in this package or for any misfortune that may befall you or others as a result of its use.

Please report bugs at: http://www.mixmod.org/article.php3?id_article=23

More information on : www.mixmod.org


Attaching package: ‘Rmixmod’

The following object is masked from ‘package:car’:

    ellipse

> library(StatMatch)
Loading required package: proxy

Attaching package: ‘proxy’

The following objects are masked from ‘package:stats’:

    as.dist, dist

The following object is masked from ‘package:base’:

    as.matrix

Loading required package: clue
Loading required package: survey
Loading required package: grid
Loading required package: Matrix
Loading required package: survival

Attaching package: ‘survey’

The following object is masked from ‘package:graphics’:

    dotchart

Loading required package: RANN
Loading required package: lpSolve
> library(MASS)
> library(ggfortify)
Loading required package: ggplot2
> library(vegan)
Loading required package: permute
This is vegan 2.4-1

Attaching package: ‘vegan’

The following object is masked from ‘package:survey’:

    calibrate

> 
> ##--Read in the data:
> mydata_names <- read.table('Enyalius_35.txt', h=T)
> str(mydata_names)
'data.frame':	35 obs. of  47 variables:
 $ sample : Factor w/ 35 levels "bib_CHUNB56555",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ type   : Factor w/ 2 levels "known","unknown": 1 1 1 1 1 1 2 1 1 1 ...
 $ species: Factor w/ 2 levels "bib","bil": 1 1 1 1 1 1 1 1 1 1 ...
 $ scan   : int  1 1 1 1 1 0 1 1 1 1 ...
 $ stym   : int  1 1 1 1 1 1 1 1 1 1 ...
 $ tdhan  : int  0 1 0 0 1 1 1 0 1 1 ...
 $ tvhan  : int  0 0 0 0 0 0 0 0 0 0 ...
 $ tdfor  : int  0 0 0 0 1 0 0 0 0 1 ...
 $ tvthi  : int  1 1 0 0 1 0 0 0 1 1 ...
 $ tcres  : int  1 1 1 1 1 1 0 1 1 0 ...
 $ spar   : int  3 2 3 3 3 3 3 3 2 2 ...
 $ sdor   : int  1 0 1 1 1 1 1 1 0 2 ...
 $ slat   : int  1 1 0 0 0 1 0 0 0 0 ...
 $ sven   : int  0 0 0 0 0 0 1 0 0 0 ...
 $ nasros : int  0 0 0 0 0 0 0 0 0 0 ...
 $ ssub   : int  1 1 1 1 0 0 1 1 1 1 ...
 $ gula   : int  1 1 1 1 1 1 1 1 1 1 ...
 $ sgula  : int  0 0 0 0 0 1 0 0 0 0 ...
 $ thead  : int  1 1 1 1 0 0 0 1 1 0 ...
 $ tment  : int  1 1 1 1 1 1 1 1 1 0 ...
 $ sflam  : int  0 0 0 0 0 0 0 0 0 0 ...
 $ shlam  : int  0 0 0 0 0 0 0 0 0 0 ...
 $ par    : int  92 87 79 81 77 79 73 77 78 81 ...
 $ mid    : int  60 61 57 54 51 61 58 60 57 54 ...
 $ cres   : int  60 65 56 55 55 60 60 56 58 58 ...
 $ ven    : int  48 65 49 43 50 48 48 46 50 46 ...
 $ infra  : int  10 11 11 9 10 9 9 8 10 10 ...
 $ pmen   : int  2 2 2 2 2 2 2 2 2 2 ...
 $ cpmen  : int  7 7 7 8 8 7 7 6 6 7 ...
 $ ngula  : int  39 43 46 40 32 40 42 36 37 37 ...
 $ can    : int  4 5 5 4 4 4 4 4 4 5 ...
 $ naslab : int  1 1 2 2 1 1 2 2 1 1 ...
 $ lor    : int  5 5 6 7 5 7 7 7 6 5 ...
 $ cinter : int  9 9 7 8 10 7 8 8 8 10 ...
 $ circ   : int  1 2 1 2 2 2 2 2 2 2 ...
 $ suplab : int  10 11 10 10 10 10 11 11 11 10 ...
 $ ros    : int  5 7 5 7 4 5 6 8 7 8 ...
 $ suboc  : int  11 14 12 15 14 14 14 12 15 13 ...
 $ sup    : int  8 11 10 11 10 10 10 10 12 9 ...
 $ subsup : int  1 1 1 1 1 1 1 1 1 1 ...
 $ tlen   : int  162 165 107 179 171 217 231 NA 205 149 ...
 $ crc    : int  115 105 100 86 74 105 113 118 105 67 ...
 $ flam   : int  33 34 36 32 30 31 30 28 34 32 ...
 $ hlam   : int  22 21 21 21 18 20 19 17 22 21 ...
 $ sulam  : int  3 2 3 3 2 2 3 2 2 4 ...
 $ tib    : int  12 13 12 13 11 13 12 11 13 12 ...
 $ atail  : int  43 47 44 38 40 40 34 38 43 34 ...
> mydata <- mydata_names[,-c(1:3)]
> str(mydata)
'data.frame':	35 obs. of  44 variables:
 $ scan  : int  1 1 1 1 1 0 1 1 1 1 ...
 $ stym  : int  1 1 1 1 1 1 1 1 1 1 ...
 $ tdhan : int  0 1 0 0 1 1 1 0 1 1 ...
 $ tvhan : int  0 0 0 0 0 0 0 0 0 0 ...
 $ tdfor : int  0 0 0 0 1 0 0 0 0 1 ...
 $ tvthi : int  1 1 0 0 1 0 0 0 1 1 ...
 $ tcres : int  1 1 1 1 1 1 0 1 1 0 ...
 $ spar  : int  3 2 3 3 3 3 3 3 2 2 ...
 $ sdor  : int  1 0 1 1 1 1 1 1 0 2 ...
 $ slat  : int  1 1 0 0 0 1 0 0 0 0 ...
 $ sven  : int  0 0 0 0 0 0 1 0 0 0 ...
 $ nasros: int  0 0 0 0 0 0 0 0 0 0 ...
 $ ssub  : int  1 1 1 1 0 0 1 1 1 1 ...
 $ gula  : int  1 1 1 1 1 1 1 1 1 1 ...
 $ sgula : int  0 0 0 0 0 1 0 0 0 0 ...
 $ thead : int  1 1 1 1 0 0 0 1 1 0 ...
 $ tment : int  1 1 1 1 1 1 1 1 1 0 ...
 $ sflam : int  0 0 0 0 0 0 0 0 0 0 ...
 $ shlam : int  0 0 0 0 0 0 0 0 0 0 ...
 $ par   : int  92 87 79 81 77 79 73 77 78 81 ...
 $ mid   : int  60 61 57 54 51 61 58 60 57 54 ...
 $ cres  : int  60 65 56 55 55 60 60 56 58 58 ...
 $ ven   : int  48 65 49 43 50 48 48 46 50 46 ...
 $ infra : int  10 11 11 9 10 9 9 8 10 10 ...
 $ pmen  : int  2 2 2 2 2 2 2 2 2 2 ...
 $ cpmen : int  7 7 7 8 8 7 7 6 6 7 ...
 $ ngula : int  39 43 46 40 32 40 42 36 37 37 ...
 $ can   : int  4 5 5 4 4 4 4 4 4 5 ...
 $ naslab: int  1 1 2 2 1 1 2 2 1 1 ...
 $ lor   : int  5 5 6 7 5 7 7 7 6 5 ...
 $ cinter: int  9 9 7 8 10 7 8 8 8 10 ...
 $ circ  : int  1 2 1 2 2 2 2 2 2 2 ...
 $ suplab: int  10 11 10 10 10 10 11 11 11 10 ...
 $ ros   : int  5 7 5 7 4 5 6 8 7 8 ...
 $ suboc : int  11 14 12 15 14 14 14 12 15 13 ...
 $ sup   : int  8 11 10 11 10 10 10 10 12 9 ...
 $ subsup: int  1 1 1 1 1 1 1 1 1 1 ...
 $ tlen  : int  162 165 107 179 171 217 231 NA 205 149 ...
 $ crc   : int  115 105 100 86 74 105 113 118 105 67 ...
 $ flam  : int  33 34 36 32 30 31 30 28 34 32 ...
 $ hlam  : int  22 21 21 21 18 20 19 17 22 21 ...
 $ sulam : int  3 2 3 3 2 2 3 2 2 4 ...
 $ tib   : int  12 13 12 13 11 13 12 11 13 12 ...
 $ atail : int  43 47 44 38 40 40 34 38 43 34 ...
> 
> ##--Graph of pairwise data plots when there are small numbers of characters (else basic R 
> ##--function and windows cannot handle the plots resulting from calling 'plot' function):
> if( dim(mydata_names)[2] < 10 ){
+ print('Making pairwise plots of the data... ')
+ pdf('pairwise_data_plots.pdf')
+ plot(mydata_names)
+ dev.off()} else {print('Cannot do pairwise plots of the data (too much data)... ')
+ }
[1] "Cannot do pairwise plots of the data (too much data)... "
> 
> 
> ############ ANALYSIS
> 
> ############ I. SCALE / STANDARDIZE DATA USING NMDS 
> ##--Estimate Gower distances from the original data. Here, we are starting from a single 
> ##--data frame, and the code was originally written with a single morphological data matrix
> ##--in mind. However, multiple datasets from different data types could be used. Either way,
> ##--Gower distances are ideal because they allow us to get an estimate of the similarities
> ##--and dissimilarities between all individuals/samples, while allowing for missing data 
> ##--('NA' observations) in the dataset.
> mydata_gower <- gower.dist(mydata)
> 
> ##--Use ggfortify to visualize the Gower distnces:
> pdf('gower_dist_gg_autoplot.pdf')
> autoplot(mydata_gower)
Scale for 'y' is already present. Adding another scale for 'y', which will
replace the existing scale.
> dev.off()
null device 
          1 
> 
> ##--Conduct NMDS using 'metaMDS' function in vegan package, retaining k dimensions:
> mydata_gower_metaMDS <- metaMDS(mydata_gower, k=4)
Run 0 stress 0.06359327 
Run 1 stress 0.06405575 
... Procrustes: rmse 0.03843314  max resid 0.1940171 
Run 2 stress 0.0635942 
... Procrustes: rmse 0.0001010223  max resid 0.0002516404 
... Similar to previous best
Run 3 stress 0.06405694 
... Procrustes: rmse 0.03872706  max resid 0.1949411 
Run 4 stress 0.06405459 
... Procrustes: rmse 0.0387104  max resid 0.1947661 
Run 5 stress 0.06459079 
Run 6 stress 0.06359365 
... Procrustes: rmse 0.0001179953  max resid 0.000485407 
... Similar to previous best
Run 7 stress 0.06467817 
Run 8 stress 0.06359395 
... Procrustes: rmse 0.0003057573  max resid 0.001487249 
... Similar to previous best
Run 9 stress 0.06466355 
Run 10 stress 0.06467233 
Run 11 stress 0.06359492 
... Procrustes: rmse 0.0004410956  max resid 0.001882751 
... Similar to previous best
Run 12 stress 0.06458819 
Run 13 stress 0.06359315 
... New best solution
... Procrustes: rmse 3.66474e-05  max resid 8.631713e-05 
... Similar to previous best
Run 14 stress 0.0640648 
... Procrustes: rmse 0.03873621  max resid 0.1948785 
Run 15 stress 0.06359063 
... New best solution
... Procrustes: rmse 0.0005103027  max resid 0.001466455 
... Similar to previous best
Run 16 stress 0.06409267 
Run 17 stress 0.0645915 
Run 18 stress 0.06359303 
... Procrustes: rmse 0.001725995  max resid 0.006890225 
... Similar to previous best
Run 19 stress 0.06359301 
... Procrustes: rmse 0.0005708623  max resid 0.001768605 
... Similar to previous best
Run 20 stress 0.0640547 
... Procrustes: rmse 0.03844535  max resid 0.1938729 
*** Solution reached
> summary(mydata_gower_metaMDS)
           Length Class  Mode     
nobj         1    -none- numeric  
nfix         1    -none- numeric  
ndim         1    -none- numeric  
ndis         1    -none- numeric  
ngrp         1    -none- numeric  
diss       595    -none- numeric  
iidx       595    -none- numeric  
jidx       595    -none- numeric  
xinit      140    -none- numeric  
istart       1    -none- numeric  
isform       1    -none- numeric  
ities        1    -none- numeric  
iregn        1    -none- numeric  
iscal        1    -none- numeric  
maxits       1    -none- numeric  
sratmx       1    -none- numeric  
strmin       1    -none- numeric  
sfgrmn       1    -none- numeric  
dist       595    -none- numeric  
dhat       595    -none- numeric  
points     140    -none- numeric  
stress       1    -none- numeric  
grstress     1    -none- numeric  
iters        1    -none- numeric  
icause       1    -none- numeric  
call         3    -none- call     
model        1    -none- character
distmethod   1    -none- character
distcall     1    -none- character
distance     1    -none- character
converged    1    -none- logical  
tries        1    -none- numeric  
engine       1    -none- character
species      1    -none- logical  
data         1    -none- character
> #
> nmds_stress <- mydata_gower_metaMDS$stress * 100
> nmds_stress
[1] 6.359063
> #
> mydata_gower_metaMDS$points
           MDS1         MDS2         MDS3          MDS4
1  -0.161909080  0.076946483 -0.082119235 -0.0274298612
2  -0.117153410  0.075598010 -0.108020192  0.0998317355
3  -0.202286578  0.118932256  0.010606447 -0.0438938381
4  -0.158177202  0.103337348  0.043367739 -0.0385738420
5  -0.103585773 -0.051855740 -0.045051560 -0.0998242792
6  -0.121721751  0.045426366  0.057493412  0.1077484336
7  -0.091040849  0.025436663  0.127940752 -0.0176137094
8  -0.182006048  0.094400233  0.077410700 -0.0911926954
9  -0.091507566  0.075154282 -0.063232233  0.0473182193
10 -0.004492852 -0.121417746 -0.022389005  0.0384910640
11 -0.069703570 -0.112476905  0.052401073  0.0832883765
12 -0.076874174 -0.099200753  0.147235217  0.0448586943
13 -0.164724353  0.063808123 -0.050320916 -0.0117724638
14 -0.044737985  0.135622704 -0.043651079  0.0617546599
15 -0.107065280 -0.014738751  0.090437012  0.0263716222
16 -0.153073773 -0.052053761  0.098436360 -0.0082634724
17 -0.107924844 -0.006356269 -0.042839145  0.0451476966
18 -0.097529785 -0.157567816  0.008329896 -0.0953747170
19 -0.091962211 -0.121061594 -0.124244176  0.0010165556
20 -0.091860575 -0.050883106 -0.091613085 -0.0740295633
21 -0.124296713 -0.078628632 -0.055015159  0.0414933230
22 -0.065131378 -0.114507417 -0.076773643 -0.0013262428
23  0.175521852  0.037669268  0.006876544 -0.0844050557
24  0.236650550  0.077937208 -0.033157350 -0.0310273808
25  0.198029922  0.045471842  0.008022128 -0.0595560515
26  0.193834538 -0.021480230 -0.008912714 -0.0656367934
27  0.168430168  0.038919781  0.009136126 -0.0808927129
28  0.209983002  0.054316660 -0.041669381  0.0073850069
29  0.079214245  0.018086256  0.148440415 -0.0003649086
30  0.196991845 -0.110701398  0.006071483 -0.0384944317
31  0.216990131 -0.086574941 -0.013571744  0.0554386102
32  0.177609405  0.066129576 -0.017115954  0.0127761762
33  0.165327922 -0.005766519 -0.015513638  0.0370124710
34  0.206930382  0.028697548  0.018813771  0.1077497738
35  0.203251790  0.023380974  0.024191136  0.0519896004
attr(,"centre")
[1] TRUE
attr(,"pc")
[1] TRUE
attr(,"halfchange")
[1] FALSE
attr(,"internalscaling")
[1] 5.209555
> metaMDS_points <- as.data.frame(mydata_gower_metaMDS$points)
> metaMDS_points
           MDS1         MDS2         MDS3          MDS4
1  -0.161909080  0.076946483 -0.082119235 -0.0274298612
2  -0.117153410  0.075598010 -0.108020192  0.0998317355
3  -0.202286578  0.118932256  0.010606447 -0.0438938381
4  -0.158177202  0.103337348  0.043367739 -0.0385738420
5  -0.103585773 -0.051855740 -0.045051560 -0.0998242792
6  -0.121721751  0.045426366  0.057493412  0.1077484336
7  -0.091040849  0.025436663  0.127940752 -0.0176137094
8  -0.182006048  0.094400233  0.077410700 -0.0911926954
9  -0.091507566  0.075154282 -0.063232233  0.0473182193
10 -0.004492852 -0.121417746 -0.022389005  0.0384910640
11 -0.069703570 -0.112476905  0.052401073  0.0832883765
12 -0.076874174 -0.099200753  0.147235217  0.0448586943
13 -0.164724353  0.063808123 -0.050320916 -0.0117724638
14 -0.044737985  0.135622704 -0.043651079  0.0617546599
15 -0.107065280 -0.014738751  0.090437012  0.0263716222
16 -0.153073773 -0.052053761  0.098436360 -0.0082634724
17 -0.107924844 -0.006356269 -0.042839145  0.0451476966
18 -0.097529785 -0.157567816  0.008329896 -0.0953747170
19 -0.091962211 -0.121061594 -0.124244176  0.0010165556
20 -0.091860575 -0.050883106 -0.091613085 -0.0740295633
21 -0.124296713 -0.078628632 -0.055015159  0.0414933230
22 -0.065131378 -0.114507417 -0.076773643 -0.0013262428
23  0.175521852  0.037669268  0.006876544 -0.0844050557
24  0.236650550  0.077937208 -0.033157350 -0.0310273808
25  0.198029922  0.045471842  0.008022128 -0.0595560515
26  0.193834538 -0.021480230 -0.008912714 -0.0656367934
27  0.168430168  0.038919781  0.009136126 -0.0808927129
28  0.209983002  0.054316660 -0.041669381  0.0073850069
29  0.079214245  0.018086256  0.148440415 -0.0003649086
30  0.196991845 -0.110701398  0.006071483 -0.0384944317
31  0.216990131 -0.086574941 -0.013571744  0.0554386102
32  0.177609405  0.066129576 -0.017115954  0.0127761762
33  0.165327922 -0.005766519 -0.015513638  0.0370124710
34  0.206930382  0.028697548  0.018813771  0.1077497738
35  0.203251790  0.023380974  0.024191136  0.0519896004
> row.names(metaMDS_points) <- mydata_names[,1]
> names(metaMDS_points) <- c('nmds_1', 'nmds_2', 'nmds_3', 'nmds_4')
> #
> pdf('gower_nmds_plot.pdf')
> plot(metaMDS_points)
> dev.off()
null device 
          1 
> pdf('gower_nmds_plot_1vs2.pdf')
> plot(metaMDS_points$nmds_1, metaMDS_points$nmds_2, xlab='NMDS dim 1', ylab='NMDS dim 2')
> text(-0.12,0.12, round(c(mydata_gower_metaMDS$stress * 100), digits=2), col='red')
> dev.off()
null device 
          1 
> pdf('gower_nmds_plot_1vs3.pdf')
> plot(metaMDS_points$nmds_1, metaMDS_points$nmds_3, xlab='NMDS dim 1', ylab='NMDS dim 3')
> text(-0.12,0.12, round(c(mydata_gower_metaMDS$stress * 100), digits=2), col='red')
> dev.off()
null device 
          1 
> pdf('gower_nmds_plot_2vs3.pdf')
> plot(metaMDS_points$nmds_2, metaMDS_points$nmds_3, xlab='NMDS dim 2', ylab='NMDS dim 3')
> text(-0.12,0.12, round(c(mydata_gower_metaMDS$stress * 100), digits=2), col='red')
> dev.off()
null device 
          1 
> 
> 
> ##--Save each dimension of values retained from NMDS into a separate variable, and then
> ##--in a data frame (extension 'df'):
> nmds_1 <- metaMDS_points[,1]
> nmds_2 <- metaMDS_points[,2]
> nmds_3 <- metaMDS_points[,3]
> nmds_4 <- metaMDS_points[,4]
> nmds_dims_df = data.frame(nmds_1, nmds_2, nmds_3, nmds_4)
> 
> 
> ############ II. PREP AND CHECK DATA FOR GMM ANALYSES
> ##--Make data frame containing the individual sample names as well as columns of points
> ##--from NMDS dimensions retained during STEP I above. Also save the new data frame(s) to
> ##--file(s) in the working dir; we may want it handy in case we need it later...
> sample_names <- mydata_names[,1]
> type <- mydata_names[,2]
> species <- mydata_names[,3]
> mydata_names_df <- data.frame(sample_names, type, species, nmds_1, nmds_2, nmds_3, nmds_4)
> write.table(mydata_names_df, file='mydata_names_df.txt')
> 
> ##--Subset the NMDS points by 'known' and 'unknown' individuals. We also stop to write the
> ##--resulting new data frames back to file in working dir--in case of subsequent checks: 
> attach(mydata_names_df)
The following objects are masked _by_ .GlobalEnv:

    nmds_1, nmds_2, nmds_3, nmds_4, sample_names, species, type

> known_0 <- mydata_names_df[ which(mydata_names_df$type=='known'), ]
> detach(mydata_names_df)
> row.names(known_0) <- known_0[,1]
> known_0
                 sample_names  type species       nmds_1       nmds_2
bib_CHUNB56555 bib_CHUNB56555 known     bib -0.161909080  0.076946483
bib_CHUNB56918 bib_CHUNB56918 known     bib -0.117153410  0.075598010
bib_CHUNB57375 bib_CHUNB57375 known     bib -0.202286578  0.118932256
bib_CHUNB57376 bib_CHUNB57376 known     bib -0.158177202  0.103337348
bib_CHUNB57377 bib_CHUNB57377 known     bib -0.103585773 -0.051855740
bib_CHUNB57378 bib_CHUNB57378 known     bib -0.121721751  0.045426366
bib_CHUNB64577 bib_CHUNB64577 known     bib -0.182006048  0.094400233
bib_CHUNB64578 bib_CHUNB64578 known     bib -0.091507566  0.075154282
bib_CHUNB64579 bib_CHUNB64579 known     bib -0.004492852 -0.121417746
bib_CHUNB64603 bib_CHUNB64603 known     bib -0.069703570 -0.112476905
bib_CHUNB64604 bib_CHUNB64604 known     bib -0.076874174 -0.099200753
bib_CHUNB64605 bib_CHUNB64605 known     bib -0.164724353  0.063808123
bib_CHUNB64606 bib_CHUNB64606 known     bib -0.044737985  0.135622704
bib_CHUNB64607 bib_CHUNB64607 known     bib -0.107065280 -0.014738751
bib_CHUNB64609 bib_CHUNB64609 known     bib -0.107924844 -0.006356269
bib_CHUNB64610 bib_CHUNB64610 known     bib -0.097529785 -0.157567816
bib_MZUSP65628 bib_MZUSP65628 known     bib -0.091962211 -0.121061594
bib_MZUSP66105 bib_MZUSP66105 known     bib -0.091860575 -0.050883106
bib_MZUSP78721 bib_MZUSP78721 known     bib -0.124296713 -0.078628632
bib_MZUSP87592 bib_MZUSP87592 known     bib -0.065131378 -0.114507417
bil_MCNR445       bil_MCNR445 known     bil  0.175521852  0.037669268
bil_MCNR522       bil_MCNR522 known     bil  0.236650550  0.077937208
bil_MCNR3277     bil_MCNR3277 known     bil  0.193834538 -0.021480230
bil_MCNR3557     bil_MCNR3557 known     bil  0.168430168  0.038919781
bil_MZUSP5366   bil_MZUSP5366 known     bil  0.209983002  0.054316660
bil_MZUSP10410 bil_MZUSP10410 known     bil  0.079214245  0.018086256
bil_MZUSP29698 bil_MZUSP29698 known     bil  0.196991845 -0.110701398
bil_MZUSP39522 bil_MZUSP39522 known     bil  0.216990131 -0.086574941
bil_MZUSP42778 bil_MZUSP42778 known     bil  0.177609405  0.066129576
bil_CHUNB36171 bil_CHUNB36171 known     bil  0.206930382  0.028697548
bil_CHUNB36172 bil_CHUNB36172 known     bil  0.203251790  0.023380974
                     nmds_3        nmds_4
bib_CHUNB56555 -0.082119235 -0.0274298612
bib_CHUNB56918 -0.108020192  0.0998317355
bib_CHUNB57375  0.010606447 -0.0438938381
bib_CHUNB57376  0.043367739 -0.0385738420
bib_CHUNB57377 -0.045051560 -0.0998242792
bib_CHUNB57378  0.057493412  0.1077484336
bib_CHUNB64577  0.077410700 -0.0911926954
bib_CHUNB64578 -0.063232233  0.0473182193
bib_CHUNB64579 -0.022389005  0.0384910640
bib_CHUNB64603  0.052401073  0.0832883765
bib_CHUNB64604  0.147235217  0.0448586943
bib_CHUNB64605 -0.050320916 -0.0117724638
bib_CHUNB64606 -0.043651079  0.0617546599
bib_CHUNB64607  0.090437012  0.0263716222
bib_CHUNB64609 -0.042839145  0.0451476966
bib_CHUNB64610  0.008329896 -0.0953747170
bib_MZUSP65628 -0.124244176  0.0010165556
bib_MZUSP66105 -0.091613085 -0.0740295633
bib_MZUSP78721 -0.055015159  0.0414933230
bib_MZUSP87592 -0.076773643 -0.0013262428
bil_MCNR445     0.006876544 -0.0844050557
bil_MCNR522    -0.033157350 -0.0310273808
bil_MCNR3277   -0.008912714 -0.0656367934
bil_MCNR3557    0.009136126 -0.0808927129
bil_MZUSP5366  -0.041669381  0.0073850069
bil_MZUSP10410  0.148440415 -0.0003649086
bil_MZUSP29698  0.006071483 -0.0384944317
bil_MZUSP39522 -0.013571744  0.0554386102
bil_MZUSP42778 -0.017115954  0.0127761762
bil_CHUNB36171  0.018813771  0.1077497738
bil_CHUNB36172  0.024191136  0.0519896004
> write.table(known_0, file='known_0.txt')
> str(known_0)
'data.frame':	31 obs. of  7 variables:
 $ sample_names: Factor w/ 35 levels "bib_CHUNB56555",..: 1 2 3 4 5 6 8 9 10 11 ...
 $ type        : Factor w/ 2 levels "known","unknown": 1 1 1 1 1 1 1 1 1 1 ...
 $ species     : Factor w/ 2 levels "bib","bil": 1 1 1 1 1 1 1 1 1 1 ...
 $ nmds_1      : num  -0.162 -0.117 -0.202 -0.158 -0.104 ...
 $ nmds_2      : num  0.0769 0.0756 0.1189 0.1033 -0.0519 ...
 $ nmds_3      : num  -0.0821 -0.108 0.0106 0.0434 -0.0451 ...
 $ nmds_4      : num  -0.0274 0.0998 -0.0439 -0.0386 -0.0998 ...
> #
> knowns <- known_0[,-c(1:3)]
> knowns
                     nmds_1       nmds_2       nmds_3        nmds_4
bib_CHUNB56555 -0.161909080  0.076946483 -0.082119235 -0.0274298612
bib_CHUNB56918 -0.117153410  0.075598010 -0.108020192  0.0998317355
bib_CHUNB57375 -0.202286578  0.118932256  0.010606447 -0.0438938381
bib_CHUNB57376 -0.158177202  0.103337348  0.043367739 -0.0385738420
bib_CHUNB57377 -0.103585773 -0.051855740 -0.045051560 -0.0998242792
bib_CHUNB57378 -0.121721751  0.045426366  0.057493412  0.1077484336
bib_CHUNB64577 -0.182006048  0.094400233  0.077410700 -0.0911926954
bib_CHUNB64578 -0.091507566  0.075154282 -0.063232233  0.0473182193
bib_CHUNB64579 -0.004492852 -0.121417746 -0.022389005  0.0384910640
bib_CHUNB64603 -0.069703570 -0.112476905  0.052401073  0.0832883765
bib_CHUNB64604 -0.076874174 -0.099200753  0.147235217  0.0448586943
bib_CHUNB64605 -0.164724353  0.063808123 -0.050320916 -0.0117724638
bib_CHUNB64606 -0.044737985  0.135622704 -0.043651079  0.0617546599
bib_CHUNB64607 -0.107065280 -0.014738751  0.090437012  0.0263716222
bib_CHUNB64609 -0.107924844 -0.006356269 -0.042839145  0.0451476966
bib_CHUNB64610 -0.097529785 -0.157567816  0.008329896 -0.0953747170
bib_MZUSP65628 -0.091962211 -0.121061594 -0.124244176  0.0010165556
bib_MZUSP66105 -0.091860575 -0.050883106 -0.091613085 -0.0740295633
bib_MZUSP78721 -0.124296713 -0.078628632 -0.055015159  0.0414933230
bib_MZUSP87592 -0.065131378 -0.114507417 -0.076773643 -0.0013262428
bil_MCNR445     0.175521852  0.037669268  0.006876544 -0.0844050557
bil_MCNR522     0.236650550  0.077937208 -0.033157350 -0.0310273808
bil_MCNR3277    0.193834538 -0.021480230 -0.008912714 -0.0656367934
bil_MCNR3557    0.168430168  0.038919781  0.009136126 -0.0808927129
bil_MZUSP5366   0.209983002  0.054316660 -0.041669381  0.0073850069
bil_MZUSP10410  0.079214245  0.018086256  0.148440415 -0.0003649086
bil_MZUSP29698  0.196991845 -0.110701398  0.006071483 -0.0384944317
bil_MZUSP39522  0.216990131 -0.086574941 -0.013571744  0.0554386102
bil_MZUSP42778  0.177609405  0.066129576 -0.017115954  0.0127761762
bil_CHUNB36171  0.206930382  0.028697548  0.018813771  0.1077497738
bil_CHUNB36172  0.203251790  0.023380974  0.024191136  0.0519896004
> dim(knowns)[1]
[1] 31
> write.table(knowns, file='knowns.txt')
> str(knowns)
'data.frame':	31 obs. of  4 variables:
 $ nmds_1: num  -0.162 -0.117 -0.202 -0.158 -0.104 ...
 $ nmds_2: num  0.0769 0.0756 0.1189 0.1033 -0.0519 ...
 $ nmds_3: num  -0.0821 -0.108 0.0106 0.0434 -0.0451 ...
 $ nmds_4: num  -0.0274 0.0998 -0.0439 -0.0386 -0.0998 ...
> #
> known_labels <- subset(mydata_names_df$species, type=='known')
> length(known_labels)
[1] 31
> known_labels
 [1] bib bib bib bib bib bib bib bib bib bib bib bib bib bib bib bib bib bib bib
[20] bib bil bil bil bil bil bil bil bil bil bil bil
Levels: bib bil
> #
> attach(mydata_names_df)
The following objects are masked _by_ .GlobalEnv:

    nmds_1, nmds_2, nmds_3, nmds_4, sample_names, species, type

> unknown_0 <- mydata_names_df[ which(mydata_names_df$type=='unknown'), ]
> detach(mydata_names_df)
> row.names(unknown_0) <- unknown_0[,1]
> unknown_0 <- unknown_0[,-c(1:3)]
> write.table(unknown_0, file='unknown_0.txt')
> str(unknown_0)
'data.frame':	4 obs. of  4 variables:
 $ nmds_1: num  -0.091 -0.153 0.198 0.165
 $ nmds_2: num  0.02544 -0.05205 0.04547 -0.00577
 $ nmds_3: num  0.12794 0.09844 0.00802 -0.01551
 $ nmds_4: num  -0.01761 -0.00826 -0.05956 0.03701
> #
> unknown_labels <- subset(mydata_names_df$species, type=='unknown')
> length(unknown_labels)
[1] 4
> unknown_labels
[1] bib bib bil bil
Levels: bib bil
> 
> ##--Remove names from data frame of unknowns and place in var 'X' (bgmm unknowns var). Also 
> ##--read in the belief matrix (B) containing prior probabilities for the knowns, with 0.95 
> ##--probability for 'known' labeled individuals and all other cells receiving probs of
> ##--0.05/k (where k is number of components or clusters, and number of columns in B). 
> ##--***IMPORTANT***: matrix B is generated by the user prior to running this script and
> ##--ONLY contains individuals classified as 'knowns'.
> row.names(unknown_0) <- c(1:dim(unknown_0)[1])
> unknowns <- unknown_0
> X <- unknowns
> X
       nmds_1       nmds_2       nmds_3       nmds_4
1 -0.09104085  0.025436663  0.127940752 -0.017613709
2 -0.15307377 -0.052053761  0.098436360 -0.008263472
3  0.19802992  0.045471842  0.008022128 -0.059556052
4  0.16532792 -0.005766519 -0.015513638  0.037012471
> dim(X)
[1] 4 4
> #
> B <- read.table('./run5_0.95.txt', header=TRUE, sep='	')
> names(B) <- c(0:2)
> row.names(B) <- B[,1]
> B <- B[,-c(1)]
> B
                   1     2
bib_CHUNB56555 0.950 0.025
bib_CHUNB56918 0.950 0.025
bib_CHUNB57375 0.950 0.025
bib_CHUNB57376 0.950 0.025
bib_CHUNB57377 0.950 0.025
bib_CHUNB57378 0.950 0.025
bib_CHUNB64577 0.950 0.025
bib_CHUNB64578 0.950 0.025
bib_CHUNB64579 0.950 0.025
bib_CHUNB64603 0.950 0.025
bib_CHUNB64604 0.950 0.025
bib_CHUNB64605 0.950 0.025
bib_CHUNB64606 0.950 0.025
bib_CHUNB64607 0.950 0.025
bib_CHUNB64609 0.950 0.025
bib_CHUNB64610 0.950 0.025
bib_MZUSP65628 0.950 0.025
bib_MZUSP66105 0.950 0.025
bib_MZUSP78721 0.950 0.025
bib_MZUSP87592 0.950 0.025
bil_MCNR445    0.025 0.950
bil_MCNR522    0.025 0.950
bil_MCNR3277   0.025 0.950
bil_MCNR3557   0.025 0.950
bil_MZUSP5366  0.025 0.950
bil_MZUSP10410 0.025 0.950
bil_MZUSP29698 0.025 0.950
bil_MZUSP39522 0.025 0.950
bil_MZUSP42778 0.025 0.950
bil_CHUNB36171 0.025 0.950
bil_CHUNB36172 0.025 0.950
> dim(B)
[1] 31  2
> 
> 
> 
> ############ III. CONDUCT UNSUPERVISED GMM CLUSTERING ANALYSIS IN RMIXMOD
> if( 1 == '0' ){print('Skipping unsupervised GMM analysis... ')} else {if(1 == '1' ){
+ date()
+ print('Conducting unsupervised GMM analysis of the data using Rmixmod... ')
+ #
+ if( 0 == '0'){print('Running unsupervised GMM using a single cluster number... ')
+ mydata_gower_gmm <-mixmodCluster(nmds_dims_df, nbCluster=2)
+ summary(mydata_gower_gmm)
+ pdf('gower_gmm_result.pdf')  ## SAVE THIS PLOT!
+ plot(mydata_gower_gmm)
+ dev.off()
+ mydata_gower_gmm['partition']
+ } else {print('Running unsupervised GMMs over a range of values for nbCluster, then selecting the best model using BIC... ')
+ mydata_gower_gmm <-mixmodCluster(nmds_dims_df, nbCluster=0)
+ summary(mydata_gower_gmm)
+ pdf('gower_gmm_result.pdf')  ## SAVE THESE PLOTS--THEY'RE AWESOME!!!
+ plot(mydata_gower_gmm)
+ plot(mydata_gower_gmm, c(1, 2))
+ plot(mydata_gower_gmm, c(1, 3))
+ plot(mydata_gower_gmm, c(1, 4))
+ plot(mydata_gower_gmm, c(2, 3))
+ plot(mydata_gower_gmm, c(2, 4))
+ plot(mydata_gower_gmm, c(3, 4))
+ dev.off()
+ mydata_gower_gmm['partition']}
+ 	}
+ }
[1] "Conducting unsupervised GMM analysis of the data using Rmixmod... "
[1] "Running unsupervised GMM using a single cluster number... "
**************************************************************
* Number of samples    =  35 
* Problem dimension    =  4 
**************************************************************
*       Number of cluster =  2 
*              Model Type =  Gaussian_pk_Lk_C 
*               Criterion =  BIC(-291.1566)
*              Parameters =  list by cluster
*                  Cluster  1 : 
                         Proportion =  0.6286 
                              Means =  -0.1104 -0.0075 -0.0042 0.0040 
                          Variances = |     0.0023    -0.0014    -0.0012     0.0008 |
                                      |    -0.0014     0.0072    -0.0001    -0.0001 |
                                      |    -0.0012    -0.0001     0.0052     0.0001 |
                                      |     0.0008    -0.0001     0.0001     0.0046 |
*                  Cluster  2 : 
                         Proportion =  0.3714 
                              Means =  0.1868 0.0128 0.0070 -0.0068 
                          Variances = |     0.0012    -0.0008    -0.0007     0.0004 |
                                      |    -0.0008     0.0038    -0.0000    -0.0000 |
                                      |    -0.0007    -0.0000     0.0027     0.0000 |
                                      |     0.0004    -0.0000     0.0000     0.0024 |
*          Log-likelihood =  181.1318 
**************************************************************
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2
> 
> ####### IV. (SEMI-)SUPERVISED GMM-BASED DISCRIMINANT ANALYSIS IN RMIXMOD:
> if( 0 == '0' ){print('Skipping GMM-based discriminant analysis in Rmixmod... ')} else {if(0 == '1' ){
+ ## Analysis:
+ ##    A. Learning:
+ mydata_known_learn <- mixmodLearn(as.data.frame(knowns), as.factor(known_labels), nbCVBlocks = 10)
+ mydata_known_learn['bestResult']
+ graphics.off()
+ quartz()
+ pdf('superRmixmod_learn_results.pdf')   ## SAVE THESE PLOTS--THEY'RE AWESOME!!!
+ plot(mydata_known_learn)
+ plot(mydata_known_learn, c(1, 2))
+ plot(mydata_known_learn, c(1, 3))
+ plot(mydata_known_learn, c(1, 4))
+ plot(mydata_known_learn, c(2, 3))
+ plot(mydata_known_learn, c(2, 4))
+ plot(mydata_known_learn, c(3, 4))
+ dev.off()
+ #
+ ##    B. Prediction:
+ ## My prior experience with this (supervised prediction on lizard morphological dataset)
+ ## suggests that prediction success when going from a set of knowns (1:1 or partial coverage)
+ ## to unknowns is usually not so good (~20%). Nevertheless, here goes:
+ mydata_unknown_prediction <- mixmodPredict(data = X, classificationRule = mydata_known_learn['bestResult'])
+ summary(mydata_unknown_prediction)
+ mean(as.integer(unknown_labels) == mydata_unknown_prediction['partition'])
+ 	}
+ }
[1] "Skipping GMM-based discriminant analysis in Rmixmod... "
> 
> ####### V. (SEMI-)SUPERVISED BELIEF-BASED GMM ANALYSIS IN BGMM:
> if( 3 == '0' ){print('Skipping belief-based GMM analysis in bgmm... ')} else if(3 == '1' ){
+ supervisedModel <- supervised(as.data.frame(knowns), class = as.factor(known_labels))
+ supervisedModel
+ # pdf('bgmm_supervised_result.pdf')
+ # plot(supervisedModel)
+ # dev.off()
+ } else if(3 == '2' ){
+ semisupervisedModel <- semisupervised(as.data.frame(X), as.data.frame(knowns), class = as.factor(known_labels), k = 2, P = B)
+ 
+ pdf('bgmm_semisupervised_result.pdf')
+ plot(semisupervisedModel)
+ dev.off()
+ z <- as.data.frame(semisupervisedModel$tij)
+ write.table(z, file='bgmm_semisupervised_posteriorProbs.txt', sep='	')} else if(3 == '3' ){
+ supervisedModel <- supervised(as.data.frame(knowns), class = as.factor(known_labels))
+ supervisedModel
+ # pdf('bgmm_supervised_result.pdf')
+ # plot(supervisedModel)
+ # dev.off()
+ semisupervisedModel <- semisupervised(as.data.frame(X), as.data.frame(knowns), class = as.factor(known_labels), k = 2, P = B)
+ 
+ pdf('bgmm_semisupervised_result.pdf')
+ plot(semisupervisedModel)
+ dev.off()
+ z <- as.data.frame(semisupervisedModel$tij)
+ write.table(z, file='bgmm_semisupervised_posteriorProbs.txt', sep='	')} else {print('Sorry, the belief, soft, and unsupervised routines in bgmm are not yet supported in GaussClust... ')}
> 
> 
> 
> 
> ######################################### END ############################################
> 
> 
> proc.time()
   user  system elapsed 
  3.566   0.154   4.102 
